# app.py
import streamlit as st
import numpy as np
import tensorflow as tf
import joblib
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import random

st.set_page_config(
    page_title="PM2.5 Prediction",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.markdown(
    """
    <style>
    .reportview-container {
        background: #9275e6;
    }
    .st-bu {
        background-color: #9275e6;
        color: white;
    }
    .st-d6 {
        background-color: #f0f2f6;
    }
    </style>
    """,
    unsafe_allow_html=True
)

@st.cache_resource
def load_resources():
    """
    ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    - ‡πÇ‡∏°‡πÄ‡∏î‡∏• PINN
    - Scaler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï (scaler_x)
    - Scaler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï (scaler_y)
    ‡πÉ‡∏ä‡πâ st.cache_resource ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    """
    try:
        model = tf.keras.models.load_model("pm25_pinn.h5")
        scaler_x = joblib.load("scaler_x.pkl")
        scaler_y = joblib.load("scaler_y.pkl")
        return model, scaler_x, scaler_y
    except Exception as e:
        st.error(f"Error loading resources: {e}")
        st.stop()

model, scaler_x, scaler_y = load_resources()

CITY_DB = {
    "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏ó‡∏£": (13.725, 100.508), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏≤‡∏ô": (13.735, 100.504), "‡∏ö‡∏≤‡∏á‡∏•‡∏≥‡∏†‡∏π‡∏•‡πà‡∏≤‡∏á": (13.715, 100.501),
    "‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤": (13.731, 100.497), "‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≠‡∏á‡∏î‡∏¥‡∏ô": (13.854, 100.745), "‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≠‡∏á‡∏î‡∏¥‡∏ô‡πÉ‡∏ï‡πâ": (13.861, 100.786),
    "‡∏ö‡∏≤‡∏á‡∏ä‡∏±‡∏ô": (13.839, 100.7), "‡∏™‡∏≤‡∏°‡∏ß‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å": (13.889, 100.708), "‡∏™‡∏≤‡∏°‡∏ß‡∏≤‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å": (13.896, 100.76),
    "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô": (13.723, 100.571), "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢": (13.71, 100.57), "‡∏û‡∏£‡∏∞‡πÇ‡∏Ç‡∏ô‡∏á": (13.707, 100.595),
    "‡∏Ñ‡∏±‡∏ô‡∏ô‡∏≤‡∏¢‡∏≤‡∏ß": (13.821, 100.677), "‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£": (13.82861, 100.5597), "‡∏à‡∏≠‡∏°‡∏û‡∏•": (13.82861, 100.5597),
    "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πÄ‡∏Å‡∏©‡∏°": (13.82861, 100.5597), "‡∏•‡∏≤‡∏î‡∏¢‡∏≤‡∏ß": (13.826, 100.565), "‡πÄ‡∏™‡∏ô‡∏≤‡∏ô‡∏¥‡∏Ñ‡∏°": (13.82861, 100.5597),
    "‡∏à‡∏≠‡∏°‡∏ó‡∏≠‡∏á": (13.693, 100.468), "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô": (13.694, 100.45), "‡∏ö‡∏≤‡∏á‡∏Ñ‡πâ‡∏≠": (13.702, 100.476),
    "‡∏ö‡∏≤‡∏á‡∏°‡∏î": (13.672, 100.468), "‡∏™‡∏µ‡∏Å‡∏±‡∏ô": (13.925, 100.593), "‡∏î‡∏¥‡∏ô‡πÅ‡∏î‡∏á": (13.778, 100.567),
    "‡∏î‡∏∏‡∏™‡∏¥‡∏ï": (13.772, 100.513), "‡∏ñ‡∏ô‡∏ô‡∏ô‡∏Ñ‡∏£‡πÑ‡∏ä‡∏¢‡∏®‡∏£‡∏µ": (13.789, 100.522), "‡∏ß‡∏ä‡∏¥‡∏£‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•": (13.778, 100.505),
    "‡∏™‡∏ß‡∏ô‡∏à‡∏¥‡∏ï‡∏£‡∏•‡∏î‡∏≤": (13.767, 100.52), "‡∏™‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏°‡∏´‡∏≤‡∏ô‡∏≤‡∏Ñ": (13.758, 100.517), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ä‡∏±‡∏Å‡∏û‡∏£‡∏∞": (13.76, 100.456),
    "‡∏â‡∏¥‡∏°‡∏û‡∏•‡∏µ": (13.786, 100.432), "‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏ä‡∏±‡∏ô": (13.789, 100.459), "‡∏ö‡∏≤‡∏á‡∏û‡∏£‡∏°": (13.752, 100.442),
    "‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏≤‡∏î": (13.767, 100.431), "‡∏ö‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á": (13.751, 100.419), "‡∏ó‡∏ß‡∏µ‡∏ß‡∏±‡∏í‡∏ô‡∏≤": (13.758, 100.348),
    "‡∏®‡∏≤‡∏•‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏™‡∏û‡∏ô‡πå": (13.783, 100.39), "‡∏ó‡∏∏‡πà‡∏á‡∏Ñ‡∏£‡∏∏": (13.614, 100.497), "‡∏ö‡∏≤‡∏á‡∏°‡∏î": (13.651, 100.51),
    "‡∏î‡∏≤‡∏ß‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á": (13.725, 100.4858), "‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏•‡∏π": (13.715, 100.473), "‡∏ö‡∏≤‡∏á‡∏¢‡∏µ‡πà‡πÄ‡∏£‡∏∑‡∏≠": (13.72, 100.482),
    "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡πÇ‡∏•": (13.707, 100.486), "‡∏ß‡∏±‡∏î‡∏Å‡∏±‡∏•‡∏¢‡∏≤‡∏ì‡πå": (13.737, 100.493), "‡∏™‡∏≥‡πÄ‡∏´‡∏£‡πà": (13.725, 100.4858),
    "‡∏´‡∏¥‡∏£‡∏±‡∏ç‡∏£‡∏π‡∏à‡∏µ": (13.731, 100.49), "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡∏ô‡∏ô‡∏ó‡πå": (13.774, 100.466), "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡∏®‡∏£‡∏µ": (13.76, 100.463),
    "‡∏ö‡πâ‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á‡∏´‡∏•‡πà‡∏≠": (13.752, 100.477), "‡∏®‡∏¥‡∏£‡∏¥‡∏£‡∏≤‡∏ä": (13.759, 100.481), "‡∏≠‡∏£‡∏∏‡∏ì‡∏≠‡∏°‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå": (13.772, 100.477),
    "‡∏ß‡∏±‡∏î‡∏ó‡πà‡∏≤‡∏û‡∏£‡∏∞": (13.733, 100.475), "‡∏ß‡∏±‡∏î‡∏≠‡∏£‡∏∏‡∏ì": (13.743, 100.486), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏à‡∏±‡πà‡∏ô": (13.786, 100.635),
    "‡∏´‡∏±‡∏ß‡∏´‡∏°‡∏≤‡∏Å": (13.756, 100.66), "‡∏ó‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏°": (13.555, 100.434), "‡πÅ‡∏™‡∏°‡∏î‡∏≥": (13.605, 100.395),
    "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≠‡πÅ‡∏´‡∏•‡∏°": (13.696, 100.494), "‡∏ö‡∏≤‡∏á‡πÇ‡∏Ñ‡∏•‡πà": (13.694, 100.516), "‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡πÑ‡∏Å‡∏£": (13.706, 100.508),
    "‡∏ö‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠": (13.82, 100.529), "‡∏ö‡∏≤‡∏á‡∏ô‡∏≤": (13.672, 100.616), "‡∏ö‡∏≤‡∏á‡∏ö‡∏≠‡∏ô": (13.646, 100.37),
    "‡∏ö‡∏≤‡∏á‡∏ö‡∏≥‡∏´‡∏£‡∏∏": (13.781, 100.482), "‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏±‡∏î": (13.791, 100.487), "‡∏ö‡∏≤‡∏á‡∏¢‡∏µ‡πà‡∏Ç‡∏±‡∏ô": (13.774, 100.492),
    "‡∏ö‡∏≤‡∏á‡∏≠‡πâ‡∏≠": (13.802, 100.512), "‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å": (13.727, 100.527), "‡∏°‡∏´‡∏≤‡∏û‡∏§‡∏í‡∏≤‡∏£‡∏≤‡∏°": (13.734, 100.52),
    "‡∏™‡∏µ‡∏•‡∏°": (13.73, 100.525), "‡∏™‡∏µ‡πà‡∏û‡∏£‡∏∞‡∏¢‡∏≤": (13.725, 100.514), "‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏ß‡∏á‡∏®‡πå": (13.724, 100.53),
    "‡∏ó‡πà‡∏≤‡πÅ‡∏£‡πâ‡∏á": (13.866, 100.65), "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå": (13.868, 100.606), "‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ": (13.698, 100.409),
    "‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": (13.72, 100.4), "‡∏ö‡∏≤‡∏á‡πÑ‡∏ú‡πà": (13.741, 100.385), "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≠‡∏á": (13.683, 100.396),
    "‡∏Ñ‡∏•‡∏≠‡∏á‡∏Å‡∏∏‡πà‡∏°": (13.808, 100.65), "‡∏õ‡∏ó‡∏∏‡∏°‡∏ß‡∏±‡∏ô": (13.74, 100.535), "‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á": (13.744, 100.52),
    "‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ": (13.736, 100.546), "‡∏ß‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà": (13.742, 100.526), "‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ": (13.68, 100.689),
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏ß‡∏®": (13.719, 100.664), "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏≠‡∏ô": (13.687, 100.656), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ô‡∏≤‡∏Ñ": (13.753, 100.513),
    "‡∏ö‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ï‡∏£": (13.752, 100.507), "‡∏õ‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏≤‡∏ö": (13.743, 100.514), "‡∏ß‡∏±‡∏î‡πÄ‡∏ó‡∏û‡∏®‡∏¥‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå": (13.749, 100.512),
    "‡∏ß‡∏±‡∏î‡πÇ‡∏™‡∏°‡∏ô‡∏±‡∏™": (13.759, 100.511), "‡∏™‡∏≤‡∏°‡πÄ‡∏™‡∏ô‡πÉ‡∏ô": (13.782, 100.545), "‡∏ä‡∏ô‡∏∞‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°": (13.762, 100.495),
    "‡∏ï‡∏•‡∏≤‡∏î‡∏¢‡∏≠‡∏î": (13.76, 100.498), "‡∏ö‡∏ß‡∏£‡∏ô‡∏¥‡πÄ‡∏ß‡∏®": (13.757, 100.501), "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡∏û‡∏£‡∏´‡∏°": (13.765, 100.505),
    "‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏≤‡∏ô‡∏ñ‡∏°": (13.762, 100.503), "‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á": (13.751, 100.492), "‡∏ß‡∏±‡∏á‡∏ö‡∏π‡∏£‡∏û‡∏≤‡∏†‡∏¥‡∏£‡∏°‡∏¢‡πå": (13.744, 100.499),
    "‡∏ß‡∏±‡∏î‡∏£‡∏≤‡∏ä‡∏ö‡∏û‡∏¥‡∏ò": (13.75, 100.499), "‡∏ß‡∏±‡∏î‡∏™‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏¢‡∏≤": (13.768, 100.497), "‡∏®‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏û‡πà‡∏≠‡πÄ‡∏™‡∏∑‡∏≠": (13.754, 100.503),
    "‡∏™‡∏≥‡∏£‡∏≤‡∏ç‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå": (13.751, 100.5), "‡πÄ‡∏™‡∏≤‡∏ä‡∏¥‡∏á‡∏ä‡πâ‡∏≤": (13.753, 100.626), "‡∏ö‡∏≤‡∏á‡∏à‡∏≤‡∏Å": (13.692, 100.423),
    "‡∏Ñ‡∏•‡∏≠‡∏á‡∏Ç‡∏ß‡∏≤‡∏á": (13.738, 100.457), "‡∏Ñ‡∏π‡∏´‡∏≤‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå": (13.727, 100.45), "‡∏ö‡∏≤‡∏á‡πÇ‡∏û‡∏á‡∏û‡∏≤‡∏á": (13.697, 100.538),
    "‡∏ñ‡∏ô‡∏ô‡∏û‡∏ç‡∏≤‡πÑ‡∏ó": (13.757, 100.559), "‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ": (13.752, 100.53), "‡∏ó‡∏∏‡πà‡∏á‡∏û‡∏ç‡∏≤‡πÑ‡∏ó": (13.763, 100.528),
    "‡∏°‡∏±‡∏Å‡∏Å‡∏∞‡∏™‡∏±‡∏ô": (13.752, 100.491), "‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏≠‡∏Å": (13.675, 100.51), "‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ö‡∏π‡∏£‡∏ì‡∏∞": (13.67, 100.855),
    "‡∏Ç‡∏∏‡∏°‡∏ó‡∏≠‡∏á": (13.736, 100.723), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏ô‡∏∏‡πà‡∏ô": (13.753, 100.754), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ß‡∏®": (13.753, 100.815),
    "‡∏ó‡∏±‡∏ö‡∏¢‡∏≤‡∏ß": (13.728, 100.771), "‡∏•‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏±‡∏á": (13.723, 100.817), "‡∏•‡∏≥‡∏õ‡∏•‡∏≤‡∏ó‡∏¥‡∏ß": (13.765, 100.6),
    "‡∏à‡∏£‡πÄ‡∏Ç‡πâ‡∏ö‡∏±‡∏ß": (13.84, 100.612), "‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß": (13.811, 100.609), "‡∏ß‡∏±‡∏á‡∏ó‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏á": (13.779, 100.576),
    "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": (13.736, 100.56), "‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": (13.743, 100.596), "‡∏û‡∏£‡∏∞‡πÇ‡∏Ç‡∏ô‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": (13.719, 100.628),
    "‡∏™‡∏ß‡∏ô‡∏´‡∏•‡∏ß‡∏á": (13.726, 100.688), "‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏™‡∏π‡∏á": (13.761, 100.504), "‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏£‡∏£‡∏î‡∏¥": (13.741, 100.513),
    "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≠‡∏¢": (13.734, 100.511), "‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏ß‡∏á‡∏®‡πå": (13.739, 100.541), "‡∏ó‡∏∏‡πà‡∏á‡∏°‡∏´‡∏≤‡πÄ‡∏°‡∏Ü": (13.718, 100.532),
    "‡∏ó‡∏∏‡πà‡∏á‡∏ß‡∏±‡∏î‡∏î‡∏≠‡∏ô": (13.71, 100.514), "‡∏¢‡∏≤‡∏ô‡∏ô‡∏≤‡∏ß‡∏≤": (13.714, 100.63), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏ñ‡∏ô‡∏ô": (13.898, 100.654),
    "‡∏™‡∏≤‡∏¢‡πÑ‡∏´‡∏°": (13.921, 100.672), "‡∏Å‡∏£‡∏∞‡∏ó‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢": (13.823, 100.82), "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏¥‡∏ö": (13.914, 100.88),
    "‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏¥‡∏ö‡∏™‡∏≠‡∏á": (13.914, 100.81), "‡∏Ñ‡∏π‡πâ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠": (13.872, 100.877), "‡∏•‡∏≥‡∏ï‡πâ‡∏≠‡∏¢‡∏ï‡∏¥‡πà‡∏á": (13.781, 100.844),
    "‡∏•‡∏≥‡∏ú‡∏±‡∏Å‡∏ä‡∏µ": (13.797, 100.885), "‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏≠‡∏Å": (13.869, 100.836), "‡πÇ‡∏Ñ‡∏Å‡πÅ‡∏ù‡∏î": (13.84, 100.351),
    "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏û‡∏•‡∏π": (13.714, 100.358), "‡∏´‡∏ô‡∏≠‡∏á‡πÅ‡∏Ç‡∏°": (13.68, 100.58), "‡∏ï‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡πÄ‡∏Ç‡∏ô": (13.871, 100.564),
    "‡∏ó‡∏∏‡πà‡∏á‡∏™‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á": (13.883, 100.586), "‡∏ö‡∏≤‡∏á‡∏Å‡∏∞‡∏õ‡∏¥": (13.752, 100.579), "‡∏™‡∏≤‡∏°‡πÄ‡∏™‡∏ô‡∏ô‡∏≠‡∏Å": (13.796, 100.577),
    "‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á": (13.769, 100.577)
}

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.image("images/logo.png", width=250)

st.markdown("<h1 style='text-align: center; color: #3d0066;'>PM2.5 Prediction</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center; color: #5a0099;'>using Physics-Informed Neural Networks (PINN)</h4>", unsafe_allow_html=True)

st.markdown("---")

st.subheader("üí° ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
input_mode = st.radio(
    "",
    ["üî¢ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ Latitude/Longitude", "üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡∏ï/‡πÅ‡∏Ç‡∏ß‡∏á"],
    index=0,
    horizontal=True,
)

st.subheader("üõ†Ô∏è ‡∏õ‡πâ‡∏≠‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
if input_mode == "ÔøΩ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ Latitude/Longitude":
    col1, col2 = st.columns(2)
    with col1:
        lat = st.number_input("Latitude", min_value=-90.0, max_value=90.0, value=13.7563, format="%.6f")
    with col2:
        lon = st.number_input("Longitude", min_value=-180.0, max_value=180.0, value=100.5018, format="%.6f")
else:
    city_name = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï/‡πÅ‡∏Ç‡∏ß‡∏á",
        list(CITY_DB.keys()),
    )
    lat, lon = CITY_DB.get(city_name)
    if lat and lon:
        st.success(f"üìç **‡πÄ‡∏Ç‡∏ï/‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:** {city_name} ‚Üí Latitude: {lat}, Longitude: {lon}")
    else:
        st.error("‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:** ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡∏ï/‡πÅ‡∏Ç‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ")

time_input = st.text_input(
    "‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (YYYY-MM-DD HH:MM:SS)",
    value=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    help="‡∏õ‡πâ‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
)
st.markdown("---")

if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5", use_container_width=True, type="primary"):
    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢..."):
        try:
            dt_object = datetime.strptime(time_input, "%Y-%m-%d %H:%M:%S")
            
            # ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            unix_timestamp = int(dt_object.timestamp())
            X_input_current = np.array([[lat, lon, unix_timestamp]], dtype=np.float32)
            X_scaled_current = scaler_x.transform(X_input_current)
            y_scaled_current = model.predict(X_scaled_current, verbose=0)
            y_pred_current = scaler_y.inverse_transform(y_scaled_current)
            
            # *** ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô ***
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ß‡∏á‡∏à‡∏£ PM2.5 ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
            hour = dt_object.hour
            if 6 <= hour < 9 or 17 <= hour < 20: # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏¢‡πá‡∏ô
                time_adjustment = random.uniform(0.5, 1.5)
            elif 9 <= hour < 17: # ‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô
                time_adjustment = random.uniform(-1, 0)
            else: # ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
                time_adjustment = random.uniform(0, 0.5)

            predicted_pm25 = max(0, y_pred_current.flatten()[0] + time_adjustment)
            
            st.markdown("### üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
            st.metric(
                label="‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
                value=f"{predicted_pm25:.2f} ¬µg/m¬≥",
                help="‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô",
            )
            
            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ---
            st.markdown("### üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 30 ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 30 ‡∏ß‡∏±‡∏ô
            prediction_dates = []
            prediction_values = []
            
            for i in range(30):
                date_to_predict = dt_object + timedelta(days=i)
                prediction_dates.append(date_to_predict)

                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∏‡∏Å‡πÜ 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
                daily_preds = []
                for hour in [0, 6, 12, 18]:
                    time_to_predict = date_to_predict.replace(hour=hour, minute=0, second=0, microsecond=0)
                    unix_ts = int(time_to_predict.timestamp())
                    X_input_daily = np.array([[lat, lon, unix_ts]], dtype=np.float32)
                    X_scaled_daily = scaler_x.transform(X_input_daily)
                    y_scaled_daily = model.predict(X_scaled_daily, verbose=0)
                    y_pred_daily = scaler_y.inverse_transform(y_scaled_daily)
                    daily_preds.append(y_pred_daily.flatten()[0])
                
                # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                avg_daily_pred = np.mean(daily_preds)
                noise = random.uniform(-1, 1) # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                final_pred = max(0, avg_daily_pred + noise) # ‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö
                prediction_values.append(final_pred)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Plotly
            df_predictions = pd.DataFrame({
                "Date": prediction_dates,
                "PM2.5 (¬µg/m¬≥)": prediction_values
            })

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Plotly
            fig = px.line(
                df_predictions,
                x="Date",
                y="PM2.5 (¬µg/m¬≥)",
                title="PM2.5 Prediction for the Next 30 Days",
                labels={"PM2.5 (¬µg/m¬≥)": "PM2.5 (¬µg/m¬≥)", "Date": "Date"},
                markers=True
            )
            fig.update_layout(hovermode="x unified")
            fig.update_traces(hovertemplate='Date: %{x|%Y-%m-%d}<br>PM2.5: %{y:.2f} ¬µg/m¬≥')
            st.plotly_chart(fig, use_container_width=True)

        except ValueError:
            st.error("‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:** ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ YYYY-MM-DD HH:MM:SS")
        except Exception as e:
            st.error(f"‚ö†Ô∏è **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:** {e}")

st.markdown("---")

# ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
st.markdown("## üåê ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ")
st.image("images/AI.png", use_container_width=True)
st.markdown("""
    ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ **Physics-Informed Neural Networks (PINNs)**
    ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÇ‡∏î‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• PINNs ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
    ‡∏°‡∏≤‡∏ú‡∏ô‡∏ß‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó‡πÄ‡∏ó‡∏µ‡∏¢‡∏° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    """)
st.markdown("---")

st.markdown(
    """
    <style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #f0f2f6;
        color: #666;
        text-align: center;
        padding: 10px;
        font-size: 12px;
    }
    </style>
    <div class="footer">
        ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
    </div>
    """,
    unsafe_allow_html=True
)
